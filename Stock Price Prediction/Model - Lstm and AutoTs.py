# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import plotly.graph_objects as go
import matplotlib.pyplot as plt
# %matplotlib inline

import datetime
from datetime import date, timedelta

from sklearn.model_selection import train_test_split

from keras.preprocessing.sequence import TimeseriesGenerator

from keras.models import Sequential
from keras.layers import Dense, LSTM

!pip install yfinance
import yfinance as yf

!pip install AutoTS
from autots import AutoTS

def stockPrice(val ,title) :

    today = date.today()

    d1       = today.strftime("%Y-%m-%d")
    end_date = d1

    d2         = date.today() - timedelta(days=5000) 
    d2         = d2.strftime("%Y-%m-%d")
    start_date = d2


    data = yf.download(
                          val                   , 
                          start    = start_date , 
                          end      = end_date   , 
                          progress = False
                      )

    data = data[["Close"]]
  
    close_data = data['Close'].values
    close_data = close_data.reshape((-1,1))

    split_percent = 0.80
    split = int(split_percent*len(close_data))

    close_train = close_data[:split]
    close_test = close_data[split:]

    date_train = data['Close'][:split]
    date_test  = data['Close'][split:]
  
    plt.figure(figsize=(20, 10))
    plt.plot(date_train, color = "black" , label = 'Train')
    plt.plot(date_test, color = "red"  , label = 'Test')
    plt.ylabel('Stock Price')
    plt.xlabel('Date')
    plt.title("Stock Price Data")
    plt.show()

    ## Model 1
    look_back = 15

    train_generator = TimeseriesGenerator(close_train, close_train, length=look_back, batch_size=20)     
    test_generator = TimeseriesGenerator(close_test, close_test, length=look_back, batch_size=1)

    model = Sequential()
    
    model.add(LSTM(10,activation='relu',input_shape=(look_back,1)))
    model.add(Dense(1))
    model.compile(optimizer='adam', loss='mse')

    num_epochs = 25
    model.fit_generator(train_generator, epochs=num_epochs, verbose=1)
   
    prediction = model.predict_generator(test_generator)

    close_train = close_train.reshape((-1))
    close_test = close_test.reshape((-1))
    prediction = prediction.reshape((-1))

    trace1 = go.Scatter(x = date_train ,y = close_train ,mode = 'lines' ,name = 'Data')
    trace2 = go.Scatter(x = date_test  ,y = prediction  ,mode = 'lines' ,name = 'Prediction')
    trace3 = go.Scatter(x = date_test  ,y = close_test  , mode='lines'  ,name = 'Ground Truth')
    layout = go.Layout(title = "Stock" ,xaxis = {'title' : "Date"} ,yaxis = {'title' : "Close"})

    fig = go.Figure(data=[trace1, trace2, trace3], layout=layout)
    fig.show()
        


    ## Model 2
    model = AutoTS(forecast_length=30, frequency='infer', ensemble='simple',max_generations=2,transformer_max_depth=2 ,verbose=2)
    model = model.fit(date_train)

    prediction = model.predict()

    y_pred = model.predict()
    forecast = y_pred.forecast

    print(forecast)

## Main
if __name__=="__main__":
    
    print("Available Stocks : \n")
    print("1. Apple \n")
    print("2. Bitcoin \n")
    print("3. Netflix \n")
    
    while True:
        
        val = input('Enter name of stock or -1 to exit: ')
        
        if(val=='-1'):
            print("Thank you")
            break
        
        
        elif(val=="Apple" or val=='1'):
            stockPrice('AAPL','Apple Stock Price Analysis')
            
        elif(val=="Bitcoin" or val=='2'):
            stockPrice('BTC-USD','Bitcoin Price Analysis')
        
        elif(val=="Netflix" or val=='3'):
            stockPrice('NFLX','Netflix Stock Price Analysis')

